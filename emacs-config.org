#+TITLE: emacs.d
#+STARTUP: showeverything
#+PROPERTY: header-args :cache yes :tangle yes :noweb yes

This is my GNU Emacs config file. There are many like it, but this one is mine.

** Early init

Enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] to speed up Lisp evaluation.

#+begin_src elisp
  ;; -*- lexical-binding: t; -*-
#+end_src

Temporarily increase the number of bytes of cons'ing we can do before garbage collection kicks in. We don't want to run the GC until after we finish initializing.

These tricks were adapted from [[https://github.com/hlissner/doom-emacs/blob/665b627b7c07c8d29ec8d334588cecc2ba308248/docs/faq.org#how-does-doom-start-up-so-quickly][Doom Emacs]].

#+begin_src elisp
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold 16777216 ; 16MB
                                                 gc-cons-percentage 0.1)
                                  (garbage-collect)))
#+end_src

Temporarily unset =file-name-handler-alist= until we're done with init.

#+begin_src elisp
  (defvar my--file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (add-hook 'emacs-startup-hook (lambda ()
                                  (setq file-name-handler-alist my--file-name-handler-alist)))
#+end_src

Native compilation will likely become part of vanilla Emacs starting in version 28. In the event that we do support it, we'll disable deferred compilation mode.

#+begin_src elisp
  (setq comp-deferred-compilation nil)
#+end_src

Call =package-initialize= very early, even before we get to the package management section. Newer versions of Emacs activate installed packages /before/ loading the init file, so we don't need to call it in that case.

#+begin_src elisp
  (when (< emacs-major-version 27)
    (package-initialize))
#+end_src

By default, stuff added by Customize will show up in =init.el=, or whatever is specified by =C-h v user-init-file=. We want our =init.el= to remain simple and uncluttered, and we don't want it to contain changes that would show up in version control.

#+begin_src elisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file :noerror))
#+end_src

If I need to, I can define variables containing sensitive or platform-specific information and put them into a separate file that shouldn't be checked into version control. My =.gitignore= for this repo blacklists all files except for the ones I choose to commit, and =secrets.el= is not one of them.

This does mean that I need to remember to print an error message for myself if I forget to define anything that I use later in this file.

#+begin_src elisp
  (let ((secrets-file (concat user-emacs-directory "secrets.el")))
    (when (file-exists-p secrets-file)
      (load secrets-file :noerror)))
#+end_src

** Package management

Add MELPA package archives, and refresh/install [[https://github.com/jwiegley/use-package][use-package]] if it's not already available.

Whenever possible, I try to defer package loading so that my startup times are as fast as possible. =use-package='s documentation was a bit confusing at first, but eventually I got it figured out:

 - If you use any of =:bind=, =:mode=, or =:commands=, you don't have
   to manually =:defer t=.
 - You can benchmark how fast your packages load by setting
   =use-package-compute-statistics= before loading =use-package=
   itself, and then invoking =M-x use-package-report=.
 - Most packages, and especially ones that add support for new
   programming languages, are already set up to autoload, so you can
   add =:defer t= instead of figuring out a suitable =:mode= for them.
 - Otherwise, try [[https://emacs.stackexchange.com/a/19718][checking the function]] you want to invoke from that
   package, and if it's natively autoloaded, you can add =:defer t=.

=magit= was the only notable exception to this rule; even though I specified a =:bind=, I still had to add a =:defer t=.

#+begin_src elisp
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
#+end_src

** Utility packages

[[https://github.com/myrjola/diminish.el][diminish.el]] hides modes (or abbreviates their names) from the modeline.

#+begin_src elisp
  (use-package diminish
    :config (diminish 'eldoc-mode))
#+end_src

=sudo-edit= allows you to enter your =sudo= password and edit (shocking, I know!) read-only files. Just invoke =M-x sudo-edit=.

#+begin_src elisp
  (use-package sudo-edit
    :defer t)
#+end_src

** General behavior

By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src elisp
  (unless backup-directory-alist
    (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups")))))

  (setq auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "auto-save-list") t)))
#+end_src

Disable the creation of lockfiles, since I never have multiple users accessing the same instance of Emacs at the same time.

#+begin_src elisp
  (setq create-lockfiles nil)
#+end_src

Whenever I'm in =text-mode=, visually wrap lines without actually breaking them like =auto-fill-mode= would.

#+begin_src elisp
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src

Whenever I open a buffer, or do anything really, assume I want UTF-8 encoding instead of something silly like Latin-1.

#+begin_src elisp
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

Change "yes or no" to "y or n", because it's less typing.

#+begin_src elisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

If I start typing while I have a selection active, delete the selection like every other editor would do.

#+begin_src elisp
  (delete-selection-mode t)
#+end_src

Use =display-line-numbers-mode= if it exists (Emacs 26+), otherwise use the deprecated =linum-mode=.

#+begin_src elisp
  (if (fboundp 'global-display-line-numbers-mode)
      (global-display-line-numbers-mode)
    (global-linum-mode))
#+end_src

Don't display the "Welcome to Emacs" stuff, just start in the =*scratch*= buffer. Also, make the scratch buffer empty.

#+begin_src elisp
  (setq inhibit-startup-screen t
        initial-scratch-message nil)
#+end_src

(Some of these options were adapted nearly verbatim from [[https://github.com/technomancy/better-defaults][the better-defaults project]].)

Use =ibuffer= for =C-x C-b=, which will sensibly replace the current buffer rather than forcing you to move your cursor to a completely different buffer when all you wanted to do was change the current buffer in the current frame, gosh darn it!

#+begin_src elisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Prefer RegEx-aware search functions. The originals are still available via the =C-M= prefix.

#+begin_src elisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

Automatically refresh the buffer if the file is changed externally. It's a pain to run something like =clang-format= and then not get to see the updated buffer. Do the same thing for Dired, and for ibuffer.

#+begin_src elisp
  (global-auto-revert-mode t)
  (setq dired-auto-revert-buffer t)
  (add-hook 'ibuffer-mode-hook (lambda () (ibuffer-auto-mode 1)))
#+end_src

Highlight pairs of parentheses.

#+begin_src elisp
  (show-paren-mode 1)
#+end_src

Disables =indent-tabs-mode= by default, so that indentation never inserts tabs. Other buffers (probably just =makefile-mode=) are still able to override this behavior if needed.

#+begin_src elisp
  (setq-default indent-tabs-mode nil)
#+end_src

The following code will:

 1. Put externally-copied clipboard text in the kill buffer before
    accidentally clobbering it.
 2. Make =apropos= commands search more extensively, even though it
    might be slightly slower.
 3. Make the mouse yank at point, rather than at click.
 4. Ensure files have a final newline appended when they are saved.
 5. Flash the frame rather than ringing a "bell" to get your
    attention.
 6. Prefer the newest Emacs Lisp byte code if there's multiple
    versions available.
 7. Make =ediff= display everything in a single frame rather than
    creating a new one.

#+begin_src elisp
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

[[https://github.com/justbur/emacs-which-key][which-key]] displays a list of available keybindings whenever you enter a partial command prefix. For example, if I press =C-x= and then give no more input, after a fraction of a second the minibuffer will open and show me everything that I can do with that prefix.

Knowing what's even possible with this editor is critical to understanding how to use it effectively. If you don't know what keybindings exist, how will you ever know when to use them? I wish I had installed this package sooner.

#+begin_src elisp
  (use-package which-key
    :diminish
    :config (which-key-mode))
#+end_src

[[https://github.com/raxod502/selectrum][selectrum]] is an alternative to Helm, Ido, and Ivy for making incremental, narrowing selections. I'm just trying it out for now. The vanilla Emacs completion UI is a bit lackluster, so this package helps with selecting items -- files, buffers, commands, etc. -- from lists. It sounds mundane when you describe it that way, but good selection UIs are crucial for a pleasant editor experience.

It also uses the standard Emacs APIs, so there's no further configuration necessary like in Helm. Just install, enable the mode, and it's there. I'm not using any of its companion packages, like =prescient= or =consult=, until I decide I need them.

Things I need to remember when I use this package:

 - To navigate into a directory while finding a file, press =TAB= or
   =C-i=, /not/ =RET=.

#+begin_src elisp
  (use-package selectrum
    :config (selectrum-mode 1))
#+end_src

** Appearance

Disable scrollbars and the tacky menu bar. Without them, we can almost pretend this is a lean and modern editor!

#+begin_src elisp
  (unless (eq window-system 'ns)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+end_src

Allow custom themes to load unhindered.

#+begin_src elisp
  (setq custom-safe-themes t)
#+end_src

Define a function that allows us to query the fonts we have installed, so that we can gracefully fall back from custom fonts to default system fonts.

#+begin_src elisp
  (defun my/first-matched-element (needles haystack predicate)
    "Returns the first matched needle in the haystack, or nil if there are none."
    (when (or (nlistp needles) (nlistp haystack) (not (functionp predicate)))
      (error "Expected parameters <list> <list> <function>"))

    (catch 'return
      (dolist (needle needles values)
        (let ((value (funcall predicate needle haystack)))
          (when value
            (throw 'return needle))))
      (throw 'return nil)))

  (defun my/get-installed-font (font-families)
    (my/first-matched-element font-families (font-family-list) 'member-ignore-case))
#+end_src

Define a helper function for taking an arbitrary color hex string and lightening it slightly.

#+begin_src elisp
  (defun my/lighten-color (color-hex-string)
    "Crudely lightens a color hex string."
    (let ((hex-number (string-to-number (substring color-hex-string 1) 16)))
      (format "#%x" (lsh (logand hex-number #x7f7f7f) 1))))
#+end_src

I've found that Emacs doesn't reliably load custom themes when started in daemon mode. For example, if I open =emacsclient=, I see my custom theme just fine, but the code that configures =whitespace-mode='s style doesn't get the right colors because Emacs somehow thought the background color was pure black. So we specify a function that handles everything to do with our custom themes, and we ensure it gets run only after the daemon has finished loading. See [[https://stackoverflow.com/a/23668935][here]] for more info.

#+begin_src elisp
  (defun my/apply-themes-and-styles ()
    "Loads and applies the custom themes."
    (interactive)
#+end_src

Emacs font heights are specified in 1/10 pt, so multiply your desired point size by 10 and you get your Emacs font height.

We also change the default fonts if we're on Windows, because Courier New is an abomination. Consolas has been around since Windows Vista (circa 2007), so it always ought to be available. We trust other operating systems to have a sane default font.

#+begin_src elisp
  (set-face-attribute 'default nil :height 115)
  (set-face-attribute 'variable-pitch nil :height 115)
  (set-face-attribute 'fixed-pitch nil :height 115 :family (face-attribute 'default :family))

  (when (string-equal system-type "windows-nt")
    (set-face-attribute 'default nil :family "Consolas")
    (set-face-attribute 'variable-pitch nil :family "Segoe UI")
    (set-face-attribute 'fixed-pitch nil :family "Consolas"))

  (let* ((serif-fonts '("Source Serif 4" "Apple Garamond" "Baskerville"
                        "Libre Baskerville" "Times New Roman" "Droid Serif"))
         (variable-font (my/get-installed-font serif-fonts)))
    (when variable-font
      (set-face-attribute 'variable-pitch nil :family variable-font)))
#+end_src

Install and load the color scheme, as well as a simpler, distraction-free modeline that respects that color scheme.

#+begin_src elisp
  (use-package base16-theme
    :config (load-theme 'base16-gruvbox-dark-hard t))

  (use-package smart-mode-line
    :config (setq sml/theme 'respectful)
    (smart-mode-line-enable))
#+end_src

The default =whitespace-mode= theme is hideously ugly, so we change it to blend in with our custom theme. Note that we have to ensure =whitespace.el= loads first, otherwise the faces that we're trying to modify won't be loaded yet.

#+begin_src elisp
  (with-eval-after-load 'whitespace
    (let ((lighter-background (my/lighten-color (face-attribute 'default :background)))
          (faces '(whitespace-indentation whitespace-space-after-tab whitespace-space-before-tab
                                          whitespace-space whitespace-tab whitespace-newline
                                          whitespace-empty whitespace-line)))

      (dolist (face faces)
        (set-face-attribute face nil :background nil :foreground lighter-background))
      (set-face-attribute 'whitespace-trailing nil :background lighter-background :foreground nil)))
#+end_src

Theme Org-mode so that it's more writing-oriented. See [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][here]]. In particular, we use a variable-pitched font for the basic text, and a fixed-pitch font for code and attributes.

Once again, we need to ensure =org.el= is loaded before we can customize its faces and colors.

#+begin_src elisp
  (with-eval-after-load 'org
    (let ((variable-font (face-attribute 'variable-pitch :family)))

      ;; Set up headers and stuff to use variable-pitch.
      (let ((org-variable-faces '(org-level-8 org-level-7 org-level-6 org-level-5
                                              org-level-4 org-level-3 org-level-2
                                              org-level-1 org-document-title)))
        (dolist (face org-variable-faces)
          (set-face-attribute face nil :family variable-font)))

      ;; When global variable-pitch-mode is enabled, we need to reset
      ;; everything else back to fixed-pitch.
      (let ((org-fixed-faces '(org-block org-meta-line org-property-value org-table))
            (org-fixed-shadow-faces '(org-code org-document-info-keyword org-tag org-verbatim)))
        (dolist (face org-fixed-faces)
          (set-face-attribute face nil :inherit 'fixed-pitch))
        (dolist (face org-fixed-shadow-faces)
          (set-face-attribute face nil :inherit '(fixed-pitch shadow)))

        (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
        (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))

        (set-face-attribute 'org-tag nil :weight 'bold :height 0.8)
        (set-face-attribute 'org-link nil :underline t))))
#+end_src

#+begin_src elisp
  (with-eval-after-load 'bookmark
    (set-face-attribute 'bookmark-face nil :background nil :foreground nil :inherit 'default))
#+end_src

#+begin_src elisp
  ) ; End of my/apply-themes-and-styles
#+end_src

Finally, if we're loading in daemon mode, defer loading the themes; otherwise, just do it immediately.

#+begin_src elisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (my/apply-themes-and-styles))))
    (my/apply-themes-and-styles))
#+end_src

Make Org-mode WYSIWYG, and set up the variable-pitch font.

#+begin_src elisp
  (setq org-hide-emphasis-markers t)

  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'buffer-face-mode-hook (lambda () (diminish 'buffer-face-mode)))
#+end_src

** General editing

Delete trailing whitespace when saving. The only time this gets in the way is when I'm editing someone else's poorly-formatted source code, and the stripped trailing whitespace shows up in version control.

#+begin_src elisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Show some whitespace when editing code, but not all whitespace.

#+begin_src elisp
  (setq whitespace-style '(face tabs spaces space-mark tab-mark))
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

Sentences in Emacs are defined to end with two spaces instead of one by default. This means that when I use a command like =M-a= or =M-e= (backward and forward sentence, respectively) or =M-k= (kill to end of sentence), I end up deleting the entire paragraph, because I never end sentences with two spaces. This code changes it to be one space, like I expect.

The [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Sentences.html][GNU documentation]] notes that this may interfere with abbreviations, but I think this is an acceptable tradeoff. I'll never use sentence-based editing commands otherwise. In fact, I didn't even know about them until I saw it in [[https://pages.sachachua.com/.emacs.d/Sacha.html][someone else's]] config. I simply thought =M-e= moved to the end of the paragraph!

Also, I really need to get into the habit of using =C-x DEL= to delete backwards to the beginning of the sentence. It's quite handy, but I'm not yet in the habit of reaching for the sentence-based text manipulation keybindings (because of the aforementioned double-space weirdness.)

#+begin_src elisp
  (setq sentence-end-double-space nil)
#+end_src

This binds =M-Q= to be the inverse of =M-q= (=M-x fill-paragraph=).

#+begin_src elisp
  (defun my/unfill-paragraph (&optional region)
    "Take a multi-line paragraph and make it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) (list t)))
    (let ((fill-column (point-max))) (fill-paragraph nil region)))

  (global-set-key (kbd "M-Q") 'my/unfill-paragraph)
#+end_src

=multiple-cursors= lets you select and edit multiple pieces of text at once. It's rad.

#+begin_src elisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . 'mc/edit-lines)
           ("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-c C-<" . 'mc/mark-all-like-this)))
#+end_src

=undo-tree= makes navigating Emacs' undo/redo history a breeze. You can view the tree with =C-x u= by default.

#+begin_src elisp
  (use-package undo-tree
    :diminish
    :config (global-undo-tree-mode))
#+end_src

** Programming

Add the =company= auto-completion framework and its various integrations with other programming languages.

Adapted from [[https://github.com/jwiegley/dot-emacs/blob/master/init.el][jwiegley's]] config files.

#+begin_src elisp
  (use-package company
    :defer 3
    :diminish
    :commands (company-mode company-indent-or-complete-common)
    :init
    (dolist (hook '(emacs-lisp-mode-hook c-mode-common-hook))
      (add-hook hook
                #'(lambda ()
                    (local-set-key (kbd "<tab>")
                                   #'company-indent-or-complete-common))))
    :config (global-company-mode 1))

  (use-package company-auctex
    :after (company latex))

  (use-package company-elisp
    :after company
    :config
    (push 'company-elisp company-backends))
#+end_src

Git VCS.

#+begin_src elisp
  (use-package magit
    :defer t
    :bind ("C-x g" . 'magit-status))
#+end_src

Enable colors for =man= pages. See [[https://emacs.stackexchange.com/a/28925][here]].

#+begin_src elisp
  (require 'man)
  (set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
  (set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t)
#+end_src

Enable ANSI color interpretation in the compilation buffer. See [[https://stackoverflow.com/a/3072831][here]].

#+begin_src elisp
  (require 'ansi-color)
  (defun my/colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'my/colorize-compilation-buffer)
#+end_src

Make the compilation buffer scroll with its output.

#+begin_src elisp
  (setq compilation-scroll-output t)
#+end_src

LaTeX support.

#+begin_src elisp
  (use-package tex-mode
    :defer t
    :ensure auctex)
#+end_src

Markdown support, with special rules for when to prefer GitHub-flavored markdown.

#+begin_src elisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.(md|markdown|mdown)\\'" . markdown-mode))
    :config (setq markdown-command "multimarkdown"))
#+end_src

JSON support.

#+begin_src emacs-lisp
  (use-package json-mode
    :defer t)
#+end_src

YAML support.

#+begin_src elisp
  (use-package yaml-mode
    :defer t)
#+end_src

TOML support.

#+begin_src elisp
  (use-package toml-mode
    :defer t)
#+end_src

CMake support.

#+begin_src elisp
  (use-package cmake-mode
    :defer t)
#+end_src

OpenGL shader language support.

#+begin_src elisp
  (use-package glsl-mode
    :mode ("\\.glsl(v|f)?\\'" "\\.vert\\'" "\\.frag\\'" "\\.geom\\'" "\\.(v|f)s\\'"))
#+end_src

Arch Linux PKGBUILDs should be treated like normal shell scripts.

#+begin_src elisp
  (add-to-list 'auto-mode-alist '("\\`PKGBUILD\\'" . shell-script-mode))
#+end_src

Make =M-;= produce C99+ line comments rather than block comments.

#+begin_src elisp
  (add-hook 'c-mode-hook (lambda () (setq comment-start "//" comment-end "")))
#+end_src

Use =clang-format= to format C/C++ source code. This relies on there being a =.clang-format= file somewhere in or above the current directory. You can generate one based on the default styles with a command like =clang-format -style=llvm -dump-config > .clang-format=, and then tweak it to suit your needs.

The keybinding will only be available in [[https://www.gnu.org/software/emacs/manual/html_mono/ccmode.html][CC Mode]] buffers. Note that we defer adding the binding to =c-mode-base-map= until after =c-initialization-hook= is run, because otherwise, that keymap won't be defined.

#+begin_src elisp
  (use-package clang-format
    :hook (c-initialization . (lambda () (define-key c-mode-base-map (kbd "C-c C-f") 'clang-format-buffer))))
#+end_src

Rust support.

#+begin_src elisp
  (use-package rust-mode
    :defer t)
#+end_src

Language server protocol mode, and its associated UIs. By default, try to use =rust-analyzer= (rather than the older RLS) as the default LSP implementation for Rust code. These are only enabled for Unix-like systems for now.

#+begin_src elisp
  (use-package lsp-mode
    :if (not (memq system-type '(ms-dos windows-nt cygwin)))
    :commands (lsp lsp-deferred)
    :hook (((rust-mode c-mode c++-mode) . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :config (setq lsp-rust-server 'rust-analyzer))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :requires lsp-mode)
#+end_src

** Org mode

Don't automatically indent the text to match the headers.

#+begin_src elisp
  (setq org-adapt-indentation nil)
#+end_src

When editing encrypted files, make sure they're not autosaved to disk unencrypted. The default value is to prompt, and I don't want to have to think about it.

#+begin_src elisp
  (setq org-crypt-disable-auto-save t)
#+end_src

Other =org-crypt= stuff: setting the default PGP key, ensuring files are encrypted before being saved to disk, etc.

#+begin_src elisp
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  (when (boundp 'secrets/org-crypt-key)
    (setq org-crypt-key secrets/org-crypt-key))
#+end_src

=org-store-link= can capture links to /files/, not just websites, and the links can be retrieved later with =C-c C-l= in Org mode. This is super useful for building links between different files and external websites in my Org database.

#+begin_src elisp
  (global-set-key (kbd "C-c l") 'org-store-link)
#+end_src

#+begin_src elisp
  (when (boundp 'secrets/org-directory)
    (setq org-directory secrets/org-directory))
  (setq org-default-notes-file (expand-file-name "inbox.org" org-directory))
#+end_src

Set up =org-journal= for personal journaling. I change the prefix key to =C-c j= because I don't want =org-journal= and vanilla =org-mode= to clash.

#+begin_src elisp
  (use-package org-journal
    :defer t
    :init (setq org-journal-prefix-key "C-c j ")
    :config (setq org-journal-dir (expand-file-name "journal" org-directory)
                  org-journal-enable-encryption t
                  org-journal-enable-agenda-integration t
                  org-journal-enable-cache t
                  org-journal-start-on-weekday 7
                  org-journal-file-type 'weekly))
#+end_src

Automatically boost the text size when editing a journal file.

#+begin_src elisp
  (add-hook 'org-journal-mode-hook (lambda () (text-scale-increase 1)))
#+end_src

=org-capture= is how I send and append text and data to my database of Org files.

#+begin_src elisp
  (global-set-key (kbd "C-c c") 'org-capture)

  (defun my/org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max)))

  (setq org-capture-templates `(("t" "Add unsorted data to the inbox" entry (file+headline org-default-notes-file "Inbox")
                                 "** %?\n")

                                ("a" "Add an actionable task to the agenda" entry (file+headline ,(expand-file-name "agenda.org" org-directory) "Tasks")
                                 "** TODO %?\n")

                                ("j" "Add a journal entry" plain (function my/org-journal-find-location)
                                 "** %(format-time-string org-journal-time-format)\n%i%?")))
#+end_src

Set up =org-agenda=. =C-c a= gives me a menu from which I can pull all of my =TODO='s, events, and projects out of my Org database.

#+begin_src elisp
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq org-agenda-files `(,(expand-file-name "agenda.org" org-directory) ,org-default-notes-file)
        org-agenda-start-on-weekday nil)

  (setq org-todo-keywords '((sequence "THEN(n)" "TODO(t)" "|" "DONE(d)" "CANCELLED(c)")))
#+end_src

Set up =org-roam= to manage my personal knowledge wiki.

#+begin_src elisp
  (use-package org-roam
    :if (executable-find "sqlite3")
    :diminish
    :hook (after-init . org-roam-mode)
    :custom (org-roam-directory (expand-file-name "roam" org-directory))
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))

  (require 'org-roam-protocol)
#+end_src
