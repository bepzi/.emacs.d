#+TITLE: emacs.d
#+STARTUP: showeverything
#+PROPERTY: header-args :cache yes :tangle yes :noweb yes

This is my GNU Emacs config file. There are many like it, but this one
is mine.

** Early init

=package-initialize= should be called first, even though we do package
management stuff later.

#+begin_src elisp
  (package-initialize)
#+end_src

By default, stuff added by Customize will show up in =init.el=, or
whatever is specified by =C-h v user-init-file=. We want our =init.el=
to remain simple and uncluttered, and we don't want it to contain
changes that would show up in version control.

#+begin_src elisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file :noerror))
#+end_src

** Package management

#+begin_src elisp
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
#+end_src

** Utility packages

#+begin_src elisp
  (use-package diminish)
  (use-package s)
#+end_src

=sudo-edit= allows you to enter your =sudo= password and edit
read-only files. Just invoke =M-x sudo-edit=.

#+begin_src elisp
  (use-package sudo-edit)
#+end_src

** Basic configuration

Some of these options were adapted nearly verbatim from [[https://github.com/technomancy/better-defaults][the
better-defaults project]].

By default, Emacs saves backup files in the current directory. These
are the files ending in =~= that are cluttering up your directory
lists. The following code stashes them all in =~/.emacs.d/backups=,
where I can find them with =C-x C-f= (=find-file=) if I really need
to.

#+begin_src elisp
  (unless backup-directory-alist
    (setq backup-directory-alist
	  `(("." . ,(concat user-emacs-directory "backups")))))

  (setq auto-save-file-name-transforms
	`((".*" ,(concat user-emacs-directory "auto-save-list") t)))
#+end_src

#+begin_src elisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Change "yes or no" to "y or n", because it's less typing.

#+begin_src elisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Use =display-line-numbers-mode= if it exists (Emacs 26+), otherwise
use the deprecated =linum-mode=.

#+begin_src elisp
  (if (fboundp 'global-display-line-numbers-mode)
      (global-display-line-numbers-mode)
    (global-linum-mode))
#+end_src

Don't display the "Welcome to Emacs" stuff, just start in the
=*scratch*= buffer.

#+begin_src elisp
  (setq inhibit-startup-screen t)
#+end_src

Disable scrollbars and the tacky titlebar.

#+begin_src elisp
  (unless (eq window-system 'ns)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+end_src

Use =ibuffer= for =C-x C-b=, which will sensibly replace the current
buffer rather than forcing you to move your cursor to a completely
different buffer when all you wanted to do was change the current
buffer in the current frame, gosh darn it!

#+begin_src elisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Prefer RegEx-aware search functions.

#+begin_src elisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

#+begin_src elisp
  (show-paren-mode 1)
#+end_src

#+begin_src elisp
  (setq-default indent-tabs-mode nil)
#+end_src

The following code will:

 1. Put externally-copied clipboard text in the kill buffer before
    accidentally clobbering it.
 2. Make =apropos= commands search more extensively, even though it
    might be slightly slower.
 3. Make the mouse yank at point, rather than at click.
 4. Ensure files have a final newline appended when they are saved.
 5. Flash the frame rather than ringing a "bell" to get your
    attention.
 6. If there are multiple versions of the same file available to
    =load=, it will prefer the newest version.
 7. Makes =ediff= display everything in a single frame rather than
    creating a new one.

#+begin_src elisp
  (setq
   save-interprogram-paste-before-kill t
   apropos-do-all t
   mouse-yank-at-point t
   require-final-newline t
   visible-bell t
   load-prefer-newer t
   ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

** Appearance

#+begin_src elisp
  (use-package base16-theme
    :config (load-theme 'base16-gruvbox-dark-hard t))
#+end_src

#+begin_src elisp
  (use-package smart-mode-line
    :config (setq sml/theme 'respectful)
    (smart-mode-line-enable))
#+end_src

Emacs font heights are specified in 1/10 pt, so multiply your desired
point size by 10 and you get your Emacs font height.

We also change the default font if we're on Windows, because Courier
New is an abomination. We trust other operating systems to have a sane
default system font.

#+begin_src elisp
  (set-face-attribute 'default nil :height 114)

  (when (string-equal system-type "windows-nt")
    (set-face-attribute 'default nil :family "Consolas")
    (set-face-attribute 'fixed-pitch nil :family (face-attribute 'default :family)))
#+end_src

** General editing

#+begin_src elisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

It's a little strange that you can't readily undo =M-x
fill-paragraph=. This command binds =M-Q= to be the inverse of =M-q=.

#+begin_src elisp
  (defun my/unfill-paragraph (&optional region)
    "Take a multi-line paragraph and make it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) (list t)))
    (let ((fill-column (point-max))) (fill-paragraph nil region)))

  (global-set-key (kbd "M-Q") 'my/unfill-paragraph)
#+end_src

#+begin_src elisp
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . 'mc/edit-lines)
           ("C->" . 'mc/mark-next-like-this)
           ("C-<" . 'mc/mark-previous-like-this)
           ("C-c C-<" . 'mc/mark-all-like-this)))
#+end_src

** Programming

#+begin_src elisp
  (use-package magit
    :bind ("C-x g" . 'magit-status))
#+end_src

Enable colors for =man= pages. See [[https://emacs.stackexchange.com/a/28925][here]].

#+begin_src elisp
  (require 'man)
  (set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
  (set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t)
#+end_src

Enable ANSI color interpretation in the compilation buffer. See [[https://stackoverflow.com/a/3072831][here]].

#+begin_src elisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src

Make the compilation buffer scroll with its output.

#+begin_src elisp
  (setq compilation-scroll-output t)
#+end_src

#+begin_src elisp
  (use-package tex-mode
    :ensure auctex)
#+end_src

#+begin_src elisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src

#+begin_src elisp
  (use-package yaml-mode)
#+end_src

#+begin_src elisp
  (use-package toml-mode)
#+end_src

#+begin_src elisp
  (use-package cmake-mode)
#+end_src

#+begin_src elisp
  (use-package glsl-mode
    :mode ("\\.glsl$" "\\.glslv$" "\\.glslf$" "\\.vert$" "\\.frag$" "\\.geom$" "\\.vs" "\\.fs"))
#+end_src

Arch Linux PKGBUILDs should be treated like normal shell scripts.

#+begin_src elisp
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . shell-script-mode))
#+end_src

Make =M-;= produce C99+ line comments rather than block comments.

#+begin_src elisp
  (add-hook 'c-mode-hook
            (lambda () (setq comment-start "//" comment-end "")))
#+end_src

Use =clang-format= to format C/C++ source code. This relies on there
being a =.clang-format= file somewhere in or above the current
directory. You can generate one based on the default styles with a
command like =clang-format -style=llvm -dump-config > .clang-format=,
and then tweak it to suit your needs.

The keybinding will only be available in [[https://www.gnu.org/software/emacs/manual/html_mono/ccmode.html][CC Mode]] buffers. Note that we
defer adding the binding to =c-mode-base-map= until after
=c-initialization-hook= is run, because otherwise, that keymap won't
be defined.

#+begin_src elisp
  (use-package clang-format
    :hook (c-initialization . (lambda () (define-key c-mode-base-map (kbd "C-c C-f") 'clang-format-buffer))))
#+end_src

#+begin_src elisp
  (use-package rust-mode)
#+end_src

#+begin_src elisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((rust-mode c-mode c++-mode) . lsp-deferred)
    :config (setq lsp-rust-server 'rust-analyzer))

  (use-package lsp-ui :commands lsp-ui-mode)
#+end_src
