#+TITLE: My Emacs configuration
#+STARTUP: showeverything
#+PROPERTY: header-args :cache yes :tangle yes :noweb yes

* Emacs Config
** Initialization
#+begin_src emacs-lisp
(package-initialize)
#+end_src

*** Customize output file
I don't want stuff added by Customize to show up in =init.el=, so I
redirect it to a file that is /not/ tracked by version control.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
     (load custom-file :noerror))
#+end_src

*** Add package repos

Work around a bug in Emacs 26.2:
https://old.reddit.com/r/emacs/comments/cdei4p/failed_to_download_gnu_archive_bad_request/

#+begin_src emacs-lisp
(if (version= emacs-version "26.2")
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+end_src

#+begin_src emacs-lisp
;; Adds melpa and org mode repos unless already defined
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "org" package-archives)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
#+end_src

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

*** Set up automatic package installation
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)

;; Don't use outdated elisp bytecode
(use-package auto-compile
  :config (auto-compile-on-load-mode)
          (setq load-prefer-newer t))
#+end_src

*** Utility packages
#+begin_src emacs-lisp
(use-package bind-key)
(use-package diminish)
(use-package s)
#+end_src

** General Configuration
=better-defaults= takes care of the majority of Emacs' papercuts.

#+begin_src emacs-lisp
(use-package better-defaults)
#+end_src

*** General Behavior
**** Splash Screen
Don't display the "Welcome to Emacs" stuff

#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

**** Backups
By default, Emacs saves backup files in the current directory. These
are the files ending in =~= that are cluttering up your directory
lists. The following code stashes them all in =~/.emacs.d/backups=,
where I can find them with =C-x C-f= (=find-file=) if I really need
to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

**** Helm
Helm makes it easy to complete various things.

#+begin_src emacs-lisp
(use-package helm
  :diminish helm-mode
  :config (bind-key "C-x C-f" 'helm-find-files)
          (bind-key "M-x" 'helm-M-x)
          (bind-key "M-y" 'helm-show-kill-ring)
          (bind-key "C-x b" 'helm-mini)
          (bind-key "C-h f" 'helm-apropos)
          (bind-key "C-h r" 'helm-info-emacs)
          (bind-key "C-c s" 'helm-grep-do-git-grep)
          (bind-key "C-h C-l" 'helm-locate-library))
(helm-autoresize-mode t)
(helm-mode 1)
#+end_src

**** Delete trailing whitespace
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

**** Change "yes or no" to "y or n"
Lazy people like me never want to type "yes" when "y" will suffice.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

**** Line numbers
As of Emacs 26, =linum-mode= is deprecated, to be replaced with
=display-line-numbers-mode=.

#+begin_src emacs-lisp
(when (< emacs-major-version 26)
  (global-linum-mode))

(when (>= emacs-major-version 26)
  (global-display-line-numbers-mode)
  (global-linum-mode -1))
#+end_src

*** Appearance
**** Font size
My fonts suddenly became super tiny for some reason. This resets the
default font height to 12pt, which should work for most devices.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 112)
#+end_src

**** Mode line format
Display a more compact mode line.

#+begin_src emacs-lisp
(use-package smart-mode-line
  :config (setq sml/theme 'respectful)
          (smart-mode-line-enable))
#+end_src

When using =emacs --daemon=, you may have to launch an actual instance
of =emacs= (i.e, /not/ =emacsclient=) in order to correctly enable the
new mode line theme.

**** Color scheme
Don't forget to use Oomox (AUR: =oomox=, =oomox-git=) to set your
systemwide icons and GTK+ themes to a matching color scheme.

#+begin_src emacs-lisp
(use-package base16-theme
  :config (load-theme 'base16-gruvbox-dark-hard t))
#+end_src

Again, you may have to launch an actual =emacs= instance in order to
enable this theme for the first time.

**** Time in the modeline
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src

**** Magit
#+begin_src emacs-lisp
(use-package magit
  :config (bind-key "C-x g" 'magit-status))
#+end_src

*** Basic Editing
**** Unfilling
It's a little strange that you can't readily undo =M-x
fill-paragraph=. This command binds =M-Q= to be the inverse of =M-q=.

#+begin_src emacs-lisp
(defun my/unfill-paragraph (&optional region)
    "Take a multi-line paragraph and make it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) (list t)))
    (let ((fill-column (point-max))) (fill-paragraph nil region)))

(bind-key "M-Q" 'my/unfill-paragraph)
#+end_src

**** Multiple Cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :config (bind-key "C-S-c C-S-c" 'mc/edit-lines)
          (bind-key "C->" 'mc/mark-next-like-this)
          (bind-key "C-<" 'mc/mark-previous-like-this)
          (bind-key "C-c C-<" 'mc/mark-all-like-this))
#+end_src

*** Programming/Markup Languages
**** Man
Enable colors.

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/a/28925
(require 'man)
(set-face-attribute 'Man-overstrike nil :inherit font-lock-type-face :bold t)
(set-face-attribute 'Man-underline nil :inherit font-lock-keyword-face :underline t)
#+end_src

**** Compilation
Enable ANSI color interpretation in the compilation buffer.

#+begin_src emacs-lisp
;; https://stackoverflow.com/a/3072831
(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (let ((inhibit-read-only t))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src

Scroll with the compilation output.

#+begin_src emacs-lisp
(setq compilation-scroll-output t)
#+end_src

**** LaTeX
#+begin_src emacs-lisp
(use-package tex-mode
  :ensure auctex)
#+end_src

**** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

**** Company
Autocompletion framework for Emacs

#+begin_src emacs-lisp
(use-package company
  :defer t
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .2)
  (company-minimum-prefix-length 2)
  (company-show-numbers nil)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))
#+end_src

**** Language Server Protocol (LSP)
LSP mode will automatically configure =company-lsp= and
=lsp-ui=.

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :config (setq lsp-auto-configure t)
          (setq lsp-enable-completion-at-point t)
          (setq lsp-enable-snippet t))

(use-package lsp-ui :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
(use-package helm-lsp :commands helm-lsp)
#+end_src

**** Yasnippet
I currently only use Yasnippet for proper completion with
=company-lsp=.

#+begin_src emacs-lisp
(use-package yasnippet
  :diminish
  :config (yas-global-mode))
#+end_src

**** OCaml

#+begin_src emacs-lisp
(use-package tuareg)
#+end_src

**** Bash
For =flycheck= integration, install =shellcheck= (AUR:
=shellcheck-git-static=)

***** Arch Linux PKGBUILDS
A =PKGBUILD= should be treated like a shell script.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("PKGBUILD\\'" . shell-script-mode))
#+end_src

**** JavaScript/ECMAScript
For =flycheck= integration, install =eslint=. I don't really work in
JavaScript, so I disable needing a local =.eslintrc=.

#+begin_src emacs-lisp
(setq-default flycheck-eslint-args
  '("-c" ".eslintrc.json"))
#+end_src

**** TypeScript

#+begin_src emacs-lisp
(use-package typescript-mode)
#+end_src

**** JSON
Use =json-mode= when editing Reddit Enhancement Suite backup files.

#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.resbackup$")
#+end_src

**** YAML
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

**** TOML
#+begin_src emacs-lisp
(use-package toml-mode)
#+end_src

**** Rust
Run =rustup update stable= and =rustup component add rls rust-analysis
rust-src rustfmt=.

#+begin_src emacs-lisp
(use-package rust-mode
  :hook (rust-mode . lsp))
#+end_src

**** C
=M-;= produces (C99+) line comments rather than block comments.

#+begin_src emacs-lisp
(add-hook 'c-mode-hook
  (lambda () (setq comment-start "//" comment-end   "")))
#+end_src

***** LSP Integration

Use =ccls= if available, otherwise do nothing (falling back to
=clangd=)

#+begin_src emacs-lisp
(when (executable-find "ccls")
  (use-package ccls
    :config (setq ccl-executable (executable-find "ccls"))))
#+end_src

***** =clang-format=
Source code formatting with =clang-format=:

#+begin_src emacs-lisp
(use-package clang-format
  :config (bind-key "C-c C-f" 'clang-format-region))
#+end_src

This relies on there being a =.clang-format= file somewhere in or
above the current directory. You can generate one based off of the
default styles with a command like =clang-format -style=llvm
-dump-config > .clang-format=, and then further tweak it using a
website like [[https://www.clangformat.com/][this one]].

***** Code Styles

See: https://stackoverflow.com/a/39907217 for a novel way of
generating these style settings. Works best if you already have a
=.clang-format= to enforce the style with.

****** The One True C/C++ Code Style

...my own personal coding style, loosely based on Rust's
defaults. Spaces rather than tabs, K&R-style brace placement.

#+begin_src emacs-lisp
(c-add-style "ben"
             '("k&r"
               (indent-tabs-mode . nil)

               (c-basic-offset . 4)     ; Guessed value
               (c-offsets-alist
                (access-label . 0)      ; Guessed value
                (arglist-cont . 0)      ; Guessed value
                (arglist-intro . +)     ; Guessed value
                (block-close . 0)       ; Guessed value
                (case-label . 0)        ; Guessed value
                (class-close . 0)       ; Guessed value
                (defun-block-intro . +) ; Guessed value
                (defun-close . 0)       ; Guessed value
                (inclass . +)           ; Guessed value
                (inline-close . 0)      ; Guessed value
                (member-init-cont . 0)  ; Guessed value
                (member-init-intro . +) ; Guessed value
                (statement . 0)             ; Guessed value
                (statement-block-intro . +) ; Guessed value
                (statement-case-intro . +) ; Guessed value
                (statement-cont . +)       ; Guessed value
                (topmost-intro . 0)        ; Guessed value
                (topmost-intro-cont . 0)))) ; Guessed value

(setq-default c-default-style '((java-mode . "java")
                                (awk-mode . "awk")
                                (other . "ben")))
#+end_src

****** Xournal++

Code style to be used when contributing to [[https://github.com/xournalpp/xournalpp][Xournal++]], based off of
their =.clang-format= file.

#+begin_src emacs-lisp
(c-add-style "xournalpp"
             '("bsd"
               (indent-tabs-mode . t)
               (tab-width . 8)

               (c-basic-offset . 8)     ; Guessed value
               (c-offsets-alist
                (access-label . 0)      ; Guessed value
                (arglist-cont . 0)      ; Guessed value
                (arglist-intro . +)     ; Guessed value
                (block-close . 0)       ; Guessed value
                (brace-entry-open . 0)  ; Guessed value
                (brace-list-close . 0)  ; Guessed value
                (brace-list-entry . 0)  ; Guessed value
                (brace-list-intro . +)  ; Guessed value
                (brace-list-open . 0)   ; Guessed value
                (class-close . 0)       ; Guessed value
                (class-open . 0)        ; Guessed value
                (defun-block-intro . +) ; Guessed value
                (defun-close . 0)       ; Guessed value
                (defun-open . 0)        ; Guessed value
                (else-clause . 0)       ; Guessed value
                (inclass . +)           ; Guessed value
                (inline-close . 0)      ; Guessed value
                (member-init-cont . -2) ; Guessed value
                (member-init-intro . 1) ; Guessed value
                (statement . 0)             ; Guessed value
                (statement-block-intro . +) ; Guessed value
                (substatement-open . 0)     ; Guessed value
                (topmost-intro . +)         ; Guessed value
                (topmost-intro-cont . 0)))) ; Guessed value
#+end_src

****** Tsoding's Style

#+begin_src emacs-lisp
(c-add-style "tsoding"
             '("k&r"
               (indent-tabs-mode . nil)

               (c-basic-offset . 4)     ; Guessed value
               (c-offsets-alist
                (arglist-cont . 0)      ; Guessed value
                (arglist-intro . +)     ; Guessed value
                (block-close . 0)       ; Guessed value
                (brace-list-close . 0)  ; Guessed value
                (brace-list-entry . 0)  ; Guessed value
                (brace-list-intro . +)  ; Guessed value
                (case-label . 0)        ; Guessed value
                (class-close . 0)       ; Guessed value
                (class-open . 0)        ; Guessed value
                (defun-block-intro . +) ; Guessed value
                (defun-close . 0)       ; Guessed value
                (defun-open . 0)        ; Guessed value
                (inclass . +)           ; Guessed value
                (statement . 0)         ; Guessed value
                (statement-block-intro . +) ; Guessed value
                (statement-case-intro . +) ; Guessed value
                (statement-cont . +)    ; Guessed value
                (topmost-intro . 0)     ; Guessed value
                (topmost-intro-cont . 0))))  ; Guessed value
#+end_src

**** CMake
#+begin_src emacs-lisp
(use-package cmake-mode)
#+end_src

**** GLSL
#+begin_src emacs-lisp
(use-package glsl-mode
  :mode ("\\.glsl$" "\\.glslv$" "\\.glslf$" "\\.vert$" "\\.frag$" "\\.geom$"))
#+end_src

**** MIPS Assembly
#+begin_src emacs-lisp
(use-package mips-mode
  :mode "\\.mips$")
#+end_src

**** x86 Assembly
#+begin_src emacs-lisp
(use-package nasm-mode
  :hook (asm-mode . nasm-mode))
#+end_src

*** Org Mode
Export =.org= files to Markdown and Github-Flavored Markdown:

#+begin_src emacs-lisp
(eval-after-load "org"
  '(require 'ox-md nil t))

(use-package ox-gfm
  :config (eval-after-load "org"
            '(require 'ox-gfm nil t)))
#+end_src
